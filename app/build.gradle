apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

// Apollo
apply plugin: 'com.apollographql.android'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.graphqlproject"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility = '1.8'
        sourceCompatibility = '1.8'
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    // Apollo
    implementation 'com.apollographql.apollo:apollo-runtime:1.0.0'
    implementation 'com.apollographql.apollo:apollo-android-support:1.0.0'
    compileOnly 'org.jetbrains:annotations:13.0'
    testCompileOnly 'org.jetbrains:annotations:13.0'

    //Okhttp
    implementation 'com.squareup.okhttp3:okhttp:4.0.0'

}

apollo {
    customTypeMapping = ["URI" : "java.lang.String"]
}

def prepareReportFolder() {
    def targetFolder = file("lint_reports/")
        if (targetFolder.exists()) {
            println "Deleting previous files..."
            targetFolder.deleteDir()
        }
        else {
            mkdir(targetFolder)
        }
}

def copyNewReport() {
    def newFile = file("build/reports/lint-results.html")
    def targetFolder = file("lint_reports")
    if (newFile.exists()) {
        copy {
            def date = new Date()
            def reportName = "Lint-report-from-${date}.html"
            from newFile.absolutePath
            into targetFolder
            rename { reportName }
        }
    }
    else {
        println "Copy failed"
    }
}

// task to run lint check and copy the final report to Project in "app/lint_reports" folder
task getLintReport(dependsOn: 'lint') {
    doLast {
        println "Running lint check done..."
        prepareReportFolder()
        println "Deletion of old report done..."
        copyNewReport()
        println "New report copied..."
    }
}